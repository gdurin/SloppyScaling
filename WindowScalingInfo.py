
"""
Useful information about the WindowScaling data sets
"""
import scipy

# Independent variables describing data.
#independentNames ="k,L"   #use for window independent distributions
independentNames = "k,L,win"  #use for window dependent distributions
# Type of normalization for the function (None, NormBasic, NormIntegerSum)
normalization = None
# None does not need to be a string, NormBasic and NormIntegerSum do...
# Decide to add corrections to scaling in the function module (True/False)
corrections_to_scaling = True
# Rows to skip in the dataFiles
rows_to_skip = 0

# System Size (used to get the fileNames) and
# values of independent variables. (List of tuples if more than one)
#systemSize = "2048x1024"
#independentValues = [0.001,0.005,0.01,0.05,0.1,1,10]
#systemSize = "4096x2048"
#independentValues = [0.001,0.005]
#systemSize = "8192x4096"
#independentValues = [0.0001,0.0005,0.001]

#independentValues without window sizes...
#independentValues = [(0.001,1024), (0.005,1024),(0.01,1024),(0.05,1024),(0.1,1024), (1,1024),(10,1024), (0.001,2048),(0.005,2048), (0.0001,4096),(0.001,4096),(0.005,4096)]

#independentValues with window sizes

#independentValues3 = [(0.001,1024,1),(0.005,1024,1),(0.01,1024,1),(0.05,1024,1),(0.1,1024,1)]

#independentValues = [(0.001, 4096, 2048)]

#List of curves with similar Ws
# Ws around 1.3
#independentValues=[(0.01, 1024, 128),(0.05, 1024, 64),(10,1024,8),(0.001,4096,512),(0.005,4096,256)] 
# Ws around 0.05
#independentValues = [(0.001, 1024, 16),(0.005, 1024, 8),(0.001,2048,16),(0.005, 2048,8),(0.0001,4096,64)]
#Ws around 0.5
#independentValues = [(0.001,1024,128),(0.005,1024,64),(1,1024,8),(0.0001,4096,512)]
# Ws around 5
#independentValues = [(0.001, 1024, 1024),(0.005, 1024,512),(0.005, 4096, 1024),(0.001, 2048, 1024)]
# Ws LARGEST 30~170
#independentValues = [(1, 1024, 512),(10,1024,256),(1,1024,1024),(10,1024,512),(10,1024,1024)]

# for testing, large Ws and large k's
#independentValues = [(1,1024,256),(1,1024,512),(1,1024,1024),(10,1024,128),(10,1024,256),(10,1024,512),(10,1024,1024)]

# for testing, very small Ws...
#independentValues = [(0.001,1024,4),(0.001,2048,4),(0.001,4096,4)]

#independentValues = [(0.1,1024,8),(0.1,1024,16),(0.1,1024,32),(0.1,1024,64),(0.1,1024,128),(0.1,1024,256),(0.1,1024,512),(0.1,1024,1024)]


#List of curves with different Ws
independentValues = [(0.001, 2048, 8),(0.005,1024,16),(0.05,1024,16),(0.01,1024,64),(0.001,2048,256),(0.1,1024,64),(0.005,4096,512),(0.005, 1024, 512)]

#temp list of independentValues for jointModulerun (for making colors and symbols)
#independentValues = [(0.001, 1024, 16),(0.005, 1024, 8),(0.001,2048,16),(0.005, 2048,8),(0.0001,4096,64),(0.001, 2048, 8),(0.005,1024,16),(0.05,1024,16),(0.01,1024,64),(0.001,2048,256),(0.1,1024,64),(0.005,4096,512),(0.01, 1024, 128),(0.05, 1024, 64),(10,1024,8),(0.001,4096,512),(0.005,4096,256),(0.001,1024,1),(0.005,1024,1),(0.01,1024,1),(0.05,1024,1),(0.1,1024,1)]

# Using A00(system size) for A(s)
#independentValues=[(0.001, 1024, 1024),(0.005, 1024, 1024),(0.01, 1024, 1024),(0.05, 1024, 1024), (0.1, 1024, 1024), (1, 1024, 1024),(10, 1024, 1024),(0.001, 2048, 2048),(0.005,2048, 2048),(0.0001, 4096, 4096),(0.001, 4096, 4096),(0.005, 4096,4096)]

#The COMPLETE relevant list of (k,L,win) for A11
#independentValues = [(0.001,1024, 1),(0.001, 1024, 2), (0.001, 1024, 4), (0.001, 1024, 8), (0.001, 1024, 16), (0.001, 1024, 32), (0.001, 1024, 64), (0.001, 1024, 128), (0.001, 1024, 256),(0.001, 1024, 512),(0.005,1024, 1),(0.005, 1024, 2), (0.005, 1024, 4), (0.005, 1024, 8), (0.005, 1024, 16), (0.005, 1024, 32), (0.005, 1024, 64), (0.005, 1024, 128), (0.005, 1024, 256),(0.01,1024, 1),(0.01, 1024, 2), (0.01, 1024, 4), (0.01, 1024, 8), (0.01, 1024, 16), (0.01, 1024, 32), (0.01, 1024, 64), (0.01, 1024, 128), (0.01, 1024, 256),(0.05,1024, 1),(0.05, 1024, 2), (0.05, 1024, 4), (0.05, 1024, 8), (0.05, 1024, 16), (0.05, 1024, 32), (0.05, 1024, 64), (0.05, 1024, 128),(0.1,1024, 1),(0.1, 1024, 2), (0.1, 1024, 4), (0.1, 1024, 8),(0.1, 1024, 16), (0.1, 1024, 32), (0.1, 1024, 64), (0.1, 1024, 128),(1, 1024,1),(1, 1024, 2), (1, 1024, 4), (1, 1024, 8),(1, 1024, 16), (1, 1024, 32),(10, 1024, 1),(10, 1024, 2) ,(10, 1024, 4), (10, 1024, 8),(10, 1024, 16), (0.001, 2048, 2) ,(0.001, 2048, 4), (0.001, 2048, 8),(0.001, 2048, 16), (0.001, 2048, 32), (0.001, 2048, 64), (0.001, 2048, 128), (0.001, 2048, 256),(0.001, 2048, 512), (0.005, 2048, 2) ,(0.005, 2048, 4), (0.005, 2048, 8),(0.005, 2048, 16), (0.005, 2048, 32), (0.005, 2048, 64), (0.005, 2048, 128), (0.005, 2048, 256), (0.0001, 4096, 2) ,(0.0001, 4096, 4), (0.0001, 4096, 8),(0.0001, 4096, 16), (0.0001, 4096, 32), (0.0001, 4096, 64), (0.0001, 4096, 256),(0.0001, 4096, 512), (0.0001, 4096, 1024), (0.0001,4096, 2048),(0.001, 4096, 2) ,(0.001, 4096, 4), (0.001, 4096, 8),(0.001, 4096, 16), (0.001, 4096, 32), (0.001, 4096, 64), (0.001, 4096, 128), (0.001, 4096, 256),(0.001, 4096, 512),(0.005, 4096, 2) ,(0.005, 4096, 4), (0.005, 4096, 8),(0.005, 4096, 16), (0.005, 4096, 32), (0.005, 4096, 64), (0.005, 4096, 128), (0.005, 4096, 256),(0.005, 4096, 512)]


#independentvalues sorted according to win/corr

#independentValues = [(0.0001, 4096, 2),(0.001, 1024, 1),(0.0001, 4096, 4),(0.001, 4096, 2),(0.001, 2048, 2),(0.005, 1024, 1),(0.001, 1024, 2),(0.01, 1024, 1),(0.005, 4096, 2),(0.0001, 4096, 8),(0.001, 4096, 4),(0.005, 2048, 2),(0.001, 2048, 4),(0.005, 1024, 2),(0.05, 1024, 1),(0.001, 1024, 4),(0.01, 1024, 2),(0.005, 4096, 4),(0.1, 1024, 1),(0.0001, 4096, 16),(0.001, 4096, 8),(0.005, 2048, 4),(0.001, 2048, 8),(0.005, 1024, 4),(0.05, 1024, 2),(0.001, 1024, 8),(0.01, 1024, 4),(0.005, 4096, 8),(0.1, 1024, 2),(0.0001, 4096, 32),(1, 1024, 1),(0.001, 4096, 16),(0.005, 2048, 8),(0.001, 2048, 16),(0.005, 1024, 8),(0.05, 1024, 4),(0.001, 1024, 16),(0.01, 1024, 8),(0.005, 4096, 16),(0.1, 1024, 4),(0.0001, 4096, 64),(1, 1024, 2),(0.001, 4096, 32),(10, 1024, 1),(0.005, 2048, 16),(0.001, 2048, 32),(0.005, 1024, 16),(0.05, 1024, 8),(0.001, 1024, 32),(0.01, 1024, 16),(0.005, 4096, 32),(0.1, 1024, 8),(1, 1024, 4),(0.001, 4096, 64),(10, 1024, 2),(0.005, 2048, 32),(0.001, 2048, 64),(0.005, 1024, 32),(0.05, 1024, 16),(0.001, 1024, 64),(0.01, 1024, 32),(0.005, 4096, 64),(0.1, 1024, 16),(0.0001, 4096, 256),(1, 1024, 8),(0.001, 4096, 128),(10, 1024, 4),(0.005, 2048, 64),(0.001, 2048, 128),(0.005, 1024, 64),(0.05, 1024, 32),(0.001, 1024, 128),(0.01, 1024, 64),(0.005, 4096, 128),(0.1, 1024, 32),(0.0001, 4096, 512),(1, 1024, 16),(0.001, 4096, 256),(10, 1024, 8),(0.005, 2048, 128),(0.001, 2048, 256),(0.005, 1024, 128),(0.05, 1024, 64),(0.001, 1024, 256),(0.01, 1024, 128),(0.005, 4096, 256),(0.1, 1024, 64),(0.0001, 4096, 1024),(1, 1024, 32),(0.001, 4096, 512),(10, 1024, 16),(0.005, 2048, 256),(0.001, 2048, 512),(0.005, 1024, 256),(0.05, 1024, 128),(0.001, 1024, 512),(0.01, 1024, 256),(0.005, 4096, 512),(0.1, 1024, 128),(0.0001, 4096, 2048)]


#complete list of (k, L, win) for A10's and A01's (sorted according to win/corr)
#independentValues=[(0.0001, 4096, 4),(0.0001, 4096, 8),(0.001, 4096, 4),(0.001, 2048, 4),(0.001, 1024, 4),(0.005, 4096, 4),(0.0001, 4096, 16),(0.001, 4096, 8),(0.005, 2048, 4),(0.001, 2048, 8),(0.005, 1024, 4),(0.001, 1024, 8),(0.01, 1024, 4),(0.005, 4096, 8),(0.0001, 4096, 32),(0.001, 4096, 16),(0.005, 2048, 8),(0.001, 2048, 16),(0.005, 1024, 8),(0.05, 1024, 4),(0.001, 1024, 16),(0.01, 1024, 8),(0.005, 4096, 16),(0.1, 1024, 4),(0.0001, 4096, 64),(0.001, 4096, 32),(0.005, 2048, 16),(0.001, 2048, 32),(0.005, 1024, 16),(0.05, 1024, 8),(0.001, 1024, 32),(0.01, 1024, 16),(0.005, 4096, 32),(0.1, 1024, 8),(1, 1024, 4),(0.001, 4096, 64),(0.005, 2048, 32),(0.001, 2048, 64),(0.005, 1024, 32),(0.05, 1024, 16),(0.001, 1024, 64),(0.01, 1024, 32),(0.005, 4096, 64),(0.1, 1024, 16),(0.0001, 4096, 256),(1, 1024, 8),(0.001, 4096, 128),(10, 1024, 4),(0.005, 2048, 64),(0.001, 2048, 128),(0.005, 1024, 64),(0.05, 1024, 32),(0.001, 1024, 128),(0.01, 1024, 64),(0.005, 4096, 128),(0.1, 1024, 32),(0.0001, 4096, 512),(1, 1024, 16),(0.001, 4096, 256),(10, 1024, 8),(0.005, 2048, 128),(0.001, 2048, 256),(0.005, 1024, 128),(0.05, 1024, 64),(0.001, 1024, 256),(0.01, 1024, 128),(0.005, 4096, 256),(0.1, 1024, 64),(0.0001, 4096, 1024),(1, 1024, 32),(0.001, 4096, 512),(10, 1024, 16),(0.005, 2048, 256),(0.001, 2048, 512),(0.005, 1024, 256),(0.05, 1024, 128),(0.001, 1024, 512),(0.01, 1024, 256),(0.005, 4096, 512),(0.1, 1024, 128),(0.0001, 4096, 2048),(1, 1024, 64),(0.001, 4096, 1024),(10, 1024, 32),(0.005, 2048, 512),(0.001, 2048, 1024),(0.005, 1024, 512),(0.05, 1024, 256)]

#,(0.001, 1024, 1024),(0.01, 1024, 512),(0.005, 4096, 1024),(0.1, 1024, 256), (0.0001, 4096, 4096),(1, 1024, 128),(0.001, 4096, 2048),(10, 1024, 64),(0.005, 2048, 1024),(0.001, 2048, 2048),(0.005, 1024, 1024),(0.05, 1024, 512),(0.01, 1024, 1024),(0.005, 4096, 2048),(0.1, 1024, 512),(1, 1024, 256),(0.001, 4096, 4096),(10, 1024, 128),(0.005, 2048, 2048),(0.05, 1024, 1024),(0.005, 4096, 4096),(0.1, 1024, 1024), (1, 1024, 512),(10, 1024, 256),(1, 1024, 1024),(10, 1024, 512), (10, 1024, 1024)]



#The COMPLETE list of (k, L, win)
#independentValues = [(0.001,1024, 1),(0.001, 1024, 2), (0.001, 1024, 4), (0.001, 1024, 8), (0.001, 1024, 16), (0.001, 1024, 32), (0.001, 1024, 64), (0.001, 1024, 128), (0.001, 1024, 256),(0.001, 1024, 512),(0.001,1024,1024),(0.005,1024, 1),(0.005, 1024, 2), (0.005, 1024, 4), (0.005, 1024, 8), (0.005, 1024, 16), (0.005, 1024, 32), (0.005, 1024, 64), (0.005, 1024, 128), (0.005, 1024, 256),(0.005,1024,512),(0.005,1024,1024),(0.01,1024, 1),(0.01, 1024, 2), (0.01, 1024, 4), (0.01, 1024, 8), (0.01, 1024, 16), (0.01, 1024, 32), (0.01, 1024, 64), (0.01, 1024, 128), (0.01, 1024, 256),(0.01,1024,512),(0.01,1024,1024),(0.05,1024, 1),(0.05, 1024, 2), (0.05, 1024, 4), (0.05, 1024, 8), (0.05, 1024, 16), (0.05, 1024, 32), (0.05, 1024, 64), (0.05, 1024, 128),(0.05,1024,256),(0.05,1024,512),(0.05,1024,1024),(0.1,1024, 1),(0.1, 1024, 2), (0.1, 1024, 4), (0.1, 1024, 8),(0.1, 1024, 16), (0.1, 1024, 32), (0.1, 1024, 64),(0.1, 1024, 128),(0.1,1024,256),(0.1,1024,512),(0.1,1024,1024),(1, 1024,1),(1, 1024, 2), (1, 1024, 4), (1, 1024, 8),(1, 1024, 16), (1, 1024, 32),(1,1024,64),(1,1024,128),(1,1024,256),(1,1024,512),(1,1024,1024),(10, 1024, 1),(10, 1024, 2) ,(10, 1024, 4), (10, 1024, 8),(10, 1024, 16),(10,1024,32),(10,1024,64),(10,1024,128),(10,1024,256),(10,1024,512),(10,1024,1024),(0.001, 2048,1),(0.001, 2048, 2) ,(0.001, 2048, 4), (0.001, 2048, 8),(0.001, 2048, 16), (0.001, 2048, 32), (0.001, 2048, 64), (0.001, 2048, 128), (0.001, 2048, 256),(0.001, 2048, 512),(0.001, 2048, 1024),(0.001, 2048, 2048),(0.005, 2048, 1) ,(0.005, 2048, 2) ,(0.005, 2048, 4), (0.005, 2048, 8),(0.005, 2048, 16), (0.005, 2048, 32), (0.005, 2048, 64), (0.005, 2048, 128), (0.005, 2048, 256), (0.005, 2048, 512), (0.005, 2048, 1024), (0.005, 2048, 2048),(0.0001, 4096, 1),(0.0001, 4096, 2) ,(0.0001, 4096, 4), (0.0001, 4096, 8),(0.0001, 4096, 16), (0.0001, 4096, 32), (0.0001, 4096, 64), (0.0001, 4096, 256),(0.0001, 4096, 512), (0.0001, 4096, 1024), (0.0001,4096, 2048),(0.0001, 4096, 4096),(0.001, 4096, 1),(0.001, 4096, 2) ,(0.001, 4096, 4), (0.001, 4096, 8),(0.001, 4096, 16), (0.001, 4096, 32), (0.001, 4096, 64), (0.001, 4096, 128), (0.001, 4096, 256),(0.001, 4096, 512),(0.001, 4096, 1024), (0.001, 4096, 2048), (0.001, 4096, 4096),(0.001, 4096, 1),(0.005, 4096, 2) ,(0.005, 4096, 4), (0.005, 4096, 8),(0.005, 4096, 16), (0.005, 4096, 32), (0.005, 4096,64), (0.005, 4096, 128), (0.005, 4096, 256),(0.005, 4096, 512), (0.005, 4096, 1024), (0.005, 4096, 2048), (0.005, 4096, 4096)]

# Type of simulation: Linear, NonLinear etc
simulType = "NonLinear"

# Directory where data to be fit is stored
#IthacaDataDirectory = "data/" #old data with problematic A10, and A01, but A11 are okay
IthacaDataDirectory = "data02_18/" #fixed A10 and A01 files, and only A10 are binned
# XXX We put all the different files into the same directory???
# GianfrancoDataDirectory = "/home/meas/WinSim/NonLinear/L"+ systemSize + "/data/"
dataDirectory = IthacaDataDirectory

# Data to fit and models
#moduleNames = ['Ahk','Awk']
#moduleNames = ['Awk', 'A11']
moduleNames = ['A11','Ahx']

#
# DO NOT CHANGE ANYTHING BELOW
#
# Check if independentNames and moduleNames has a ',' at the end, and add it if needed
independentNames += (independentNames[-1]!=',') * ","
# XXX Changed JPS systemSize = "System_Size=" + systemSize


# Colors and shapes for data points for plots
# (shared between different data types)
def MakeSymbolsAndColors(independentValues):
    """
    Generate dictionaries Symbol[independent] and Color[independent]
    """
    # YJC: right now we have 128 different values, need to have more colors
    # which means we need to fix the 
    # 13 symbols, 7 colors: numbers should be relatively prime
    # 143 maximum different
    pointSymbolTypes = ['o','^','v','<','>','s','p','+','x','d','h','*','.']
    #lineSymbolTypes = ['-',':']
    pointColorTypes = ['b','g','r','c','m','k','y']
    # Replicate to make enough symbols for different data types
    SymbolList = len(pointColorTypes) * pointSymbolTypes
    #SymbolList = len(pointColorTypes) * lineSymbolTypes
    ColorList = len(pointSymbolTypes) * pointColorTypes
    #ColorList = len(lineSymbolTypes)*pointColorTypes
    Symbols = {}
    Colors = {}
    for n, independent in enumerate(independentValues):
        Symbols[independent] = SymbolList[scipy.mod(n, 13)]
        Colors[independent] = ColorList[scipy.mod(n, 7)]

    return Symbols, Colors

Symbol, Color = MakeSymbolsAndColors(independentValues)
